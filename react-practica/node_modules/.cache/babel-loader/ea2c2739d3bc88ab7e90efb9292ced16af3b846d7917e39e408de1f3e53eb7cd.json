{"ast":null,"code":"import api from '../api/api';\nexport const loginUser = async ({\n  email,\n  password\n}) => {\n  try {\n    const response = await api.post('/api/auth/login', {\n      email,\n      password\n    });\n    if (response.status >= 200 && response.status < 300) {\n      return {\n        accessToken: response.data.accessToken\n      };\n    } else {\n      const error = new Error('Error en la respuesta del servidor');\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    console.error('Error al realizar la solicitud:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","loginUser","email","password","response","post","status","accessToken","data","error","Error","console","message"],"sources":["C:/Users/huber/Documents/Source/Proyectos/KeepCoding/React_Avanzado/react-practica-main/react-practica/src/api/auth.js"],"sourcesContent":["import api from '../api/api';\n\nexport const loginUser = async ({ email, password }) => {\n  try {\n    const response = await api.post('/api/auth/login', { email, password });\n    if (response.status >= 200 && response.status < 300) {\n      return { accessToken: response.data.accessToken };\n    } else {\n      const error = new Error('Error en la respuesta del servidor');\n      error.response = response;\n      throw error;\n    }\n  } catch (error) {\n    console.error('Error al realizar la solicitud:', error.message);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAE5B,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAO;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,iBAAiB,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACvE,IAAIC,QAAQ,CAACE,MAAM,IAAI,GAAG,IAAIF,QAAQ,CAACE,MAAM,GAAG,GAAG,EAAE;MACnD,OAAO;QAAEC,WAAW,EAAEH,QAAQ,CAACI,IAAI,CAACD;MAAY,CAAC;IACnD,CAAC,MAAM;MACL,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAC,oCAAoC,CAAC;MAC7DD,KAAK,CAACL,QAAQ,GAAGA,QAAQ;MACzB,MAAMK,KAAK;IACb;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACG,OAAO,CAAC;IAC/D,MAAMH,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}